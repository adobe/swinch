{{- if .Values.serial_pipeline.enabled -}}
  {{- $application := .Values.application.name -}}
  {{- $global := .Values.global -}}
  {{- $pipeline := .Values.serial_pipeline -}}
  {{- $lenBake := 1 -}}
  {{- $lenDeploy := len $pipeline.stages.deploy -}}

  {{- $bake := $pipeline.stages.bake }}
  {{- $manual_judgment := $pipeline.stages.manual_judgment }}
  {{- $delete := $pipeline.stages.delete }}

---
apiVersion: spinnaker.adobe.com/alpha1
kind: Pipeline
metadata:
  name: {{ $pipeline.name }}
  application: {{ $application }}
spec:
# TODO auto index all pipelines in an application
  index: 1
  keepWaitingPipelines: false
  limitConcurrent: true
  spelEvaluator: v4
  stages:
    - name: "{{ $bake.name }}"
      type: bakeManifest
      namespace: "{{ $bake.namespace }}"
      outputName: redis
      requisiteStageRefIds: []
      templateRenderer: HELM2
      inputArtifacts:
        - account: {{ $global.bake.inputArtifacts.account }}
          artifact:
            name: {{ $global.bake.inputArtifacts.name }}
            type: helm/chart
            version: {{ $global.bake.inputArtifacts.version }}
      expectedArtifacts:
        - displayName: redis
          matchArtifact:
            artifactAccount: embedded-artifact
            name: redis
            type: embedded/base64
    {{- range $deploy_index, $deploy := $pipeline.stages.deploy }}
    - name: "{{ $deploy.name }} in {{ $deploy.cluster }} from {{$pipeline.name}}"
      # Extra field to bind the manifestArtifactId of every deploy stage to a single build stage
      bakeStageRefIds: 1
      requisiteStageRefIds:
        - {{  add $deploy_index $lenBake }}
      type: deployManifest
      account: "{{ $deploy.account }}"
      cloudProvider: kubernetes
      namespaceOverride: "{{ $deploy.namespace }}"
      skipExpressionEvaluation: true
      source: artifact
    {{ end }}
    {{- if $manual_judgment.enabled }}
    - name: {{ $manual_judgment.name }}
      type: manualJudgment
      failPipeline: true
      isNew: true
      judgmentInputs: [ ]
      notifications: [ ]
      sendNotifications: true
      stageTimeoutMs: {{ $manual_judgment.stageTimeoutMs }}
      requisiteStageRefIds:
        - {{ add $lenBake $lenDeploy }}
    {{- end }}
    - name: Delete (Manifest)
      requisiteStageRefIds:
    {{- if $manual_judgment.enabled }}
        - {{ add $lenBake $lenDeploy 1 }}
    {{- else }}
        - {{ add $lenBake $lenDeploy }}
    {{- end }}
      type: deleteManifest
      account:  "{{ $delete.account }}"
      cloudProvider: kubernetes
      kinds:
        - statefulSet
        - configMap
        - secret
        - persistentVolumeClaim
        - service
      labelSelectors:
        selectors:
          - key: app
            kind: EQUALS
            values:
              - redis
      namespace: "{{ $delete.namespace }}"
      mode: label
      options:
        cascading: true
  triggers: []
{{ end }}

